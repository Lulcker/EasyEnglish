name: CI/CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push backend
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/easy-english-api
          GIT_SHA=${{ github.sha }}
          docker build -t $IMAGE:latest -t $IMAGE:$GIT_SHA -f EasyEnglish/Dockerfile .
          docker push $IMAGE:latest
          docker push $IMAGE:$GIT_SHA

      - name: Build and push frontend
        run: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/easy-english-ui
          GIT_SHA=${{ github.sha }}
          docker build -t $IMAGE:latest -t $IMAGE:$GIT_SHA -f EasyEnglish.UI/Dockerfile --build-arg API_BASE_URL=${{ secrets.API_BASE_URL }} .
          docker push $IMAGE:latest
          docker push $IMAGE:$GIT_SHA

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "easy-english/"

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd easy-english/

            cat > .env <<EOL
            DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            DB_CONNECTION_STRING=${{ secrets.DB_CONNECTION_STRING }}
            WEB_BASE_URL=${{ secrets.WEB_BASE_URL }}
            AUTH_KEY=${{ secrets.AUTH_KEY }}
            AUTH_ISSUER=${{ secrets.AUTH_ISSUER }}
            AUTH_AUDIENCE=${{ secrets.AUTH_AUDIENCE }}
            HASH_PEPPER=${{ secrets.HASH_PEPPER }}
            AES_KEY=${{ secrets.AES_KEY }}
            AES_IV=${{ secrets.AES_IV }}
            EMAIL_HOST=${{ secrets.EMAIL_HOST }}
            EMAIL_PORT=${{ secrets.EMAIL_PORT }}
            EMAIL_TO=${{ secrets.EMAIL_TO }}
            EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
            GRAFANA_USER=${{ secrets.GRAFANA_USER }}
            GRAFANA_PASSWORD=${{ secrets.GRAFANA_PASSWORD }}
            EOL
            
            docker-compose pull
            docker-compose up -d --remove-orphans